#include "/systems/common.frules"

fudgevalues= ["Terrible","Poor","Mediocre","Fair","Good","Great","Superb" ]

characterTable = ruleset
{
    Attributes = keyvalues
        {
            singular = "Attribute" 
            editablekeys = campaign
            keys = ["Str","Dex","Con","Int" ]
            valueType = enum
            {
                default = "Fair"
                possiblevalues = fudgevalues
                valuedice=4df
            }
        }
    Skills = keyvalues
        {
            singular = "Skill" 
            editablekeys = character
            keys = []
            valueType = enum
            {
                default = "Fair"
                possiblevalues = fudgevalues
                valuedice=4df
            }
        }
    Gifts = list
    {
        singular = "Gift"
        editable = character
        valueType = nameAndDescription
    }
    Faults = list
    {
        singular = "Fault"
        editable = character 
        valueType = nameAndDescription
    }
    'Important stuff'= table
    {
        Fudgepoints = integer
        {
            default=0
            minvalue=0
        }
        Experiencepoints = integer
        {
            default=0
            minvalue=0 
        }
    }
    Damage = table
    {
        Scratch = slots 
        {
            number = 3
            allowedchange = increase
            overflow=  allow
            overflowValue = (max 0 ((Scratch.realvalue) - (Scratch.number)))
            }
        Hurt = slots 
        {
            number = 1
            value = ((Hurt.realvalue) + (Scratch.overflowValue))
            allowedchange = increase
            overflow=  allow
            overflowValue = (max 0 ((Hurt.value) - (Hurt.number)))
        }
        'Very hurt' = slots 
            {number = 1
            value = (('Very hurt'.realvalue) + (Hurt.overflowValue))
            allowedchange = increase
            overflow=  allow
            overflowValue = (max 0 (('Very hurt'.value) - ('Very hurt'.number)))
            }
        Incapacitated = slots 
            {number = 1
            value = ((Incapacitated.realvalue) + ('Very hurt'.overflowValue))
            allowedchange = increase
            overflow=  allow
            overflowValue = (max 0 ((Incapacitated.value) - (Incapacitated.number)))
            }
        'Near death' = slots 
            {number = 1
            value =(('Near death'.realvalue) + (Incapacitated.overflowValue))
            allowedchange = increase}
        Heal = button
            {onClick = updates
                {(Scratch.realvalue) = (Hurt.realvalue)
                (Hurt.realvalue) = ('Very hurt'.realvalue)
                ('Very hurt'.realvalue) = (Incapacitated.realvalue)
                (Incapacitated.realvalue) = ('Near death'.realvalue)
                ('Near death'.realvalue) = 0}}
    }
    'Melee weapons' = list
    {
        tableLayout = layout
        {
        }
        source=(secondary.'Melee weapons')
        singular = "Melee weapon"
        editable = character 
    }
    'Ranged weapons' = list
    {
        tableLayout = layout
        {
        }
        source=(secondary.'Ranged weapons')
        singular = "Ranged weapon"
        editable = character 
    }
    'Armour' = list
    {
        tableLayout = layout
        {
        }
        source=(secondary.Armour)
        singular = "Armour"
        editable = character 
    }
    'Other items' = list
    {
        tableLayout = layout
        {
        }
        source=(secondary.items)
        singular = "Item"
        editable = character 
    }
    Spells = list
    {
        source=(secondary.Spells)
        singular = "Spell"
        editable = character 
    }
}
weaponStats =ruleset
        {
            Stats= table
            {
                Damage=modifier
                {minvalue = -6
                maxvalue = +6}
            }
        }
armourStats= ruleset
        {
            Stats= table
            {
                'Damage Capacity'=modifier
                {minvalue = -6
                maxvalue = +6}
            }
        }
Fudge = system
{
    characters = characterTable
    creatures = characterTable
    'Ranged weapons'= weaponStats
    'Melee weapons'= weaponStats
    Armour= armourStats
    description="Simple Fudge rules"
    secondaryTypes = ["Ranged weapons","Melee weapons","Armour","Spells", "Other items"]
    initiativeCompare(item1,item2) = (compare ((intValueFromEnumString (fudgevalues,item1)), (intValueFromEnumString (fudgevalues,item2))))
    quickdice =[4df]
}

