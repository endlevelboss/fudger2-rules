classFeatures(classname,level) = 
    (map 
        (
            ((feature)->(nameAndDescription((feature.Name),(feature.Description)))),
              (filter( ((f)->((f.Level)<(level+1))),
                ((first ((filter (((class)->((class.Name) == classname)), (classInfo (libraryClasses))))))
                .Features)))
                )
        )

raceFeatures(main, subrace)=
   (if (subrace=="Standard") then
    ((getRace(main)).Features)
   else
    ((getSubrace(main,subrace)).Features))

jackBonus(char) = (bonusFrom (
                    [
                      (map ( ((x)->(x.Name)) ,(classFeatures ((((char.Class).Main).Name), (((char.Class).Main).Levels))))),
                      (map ( ((x)->(x.Name)) ,(raceFeatures (((char.Race).Main), ((char.Race).Subrace))))),
                      (map ( ((x)->(x.Name)) ,((char.'Features and Traits').'Other features')))
                    ],"Jack of All Trades", (((char.Basics).'Proficiency bonus') / 2)))

autoCompletes=[
   "AC +1"
    , "AC +2"
    , "AC +3"
    , "AC +4"
    , "AC +5"
    , "+1 AC"
    , "+2 AC"
    , "+3 AC"
    , "+4 AC"
    , "HitPoints +1"
    , "HitPoints +2"
    , "HitPoints +3"
    , "HitPoints +4"
    , "HitPoints +5"
    , "Initiative +1"
    , "Initiative +2"
    , "Initiative +3"
    , "Initiative +4"
    , "Initiative +5"
    , "Spell save DC increase by +1"
    , "Spell save DC increase by +2"
    , "Spell save DC increase by +3"
    , "Spell attack increase by +1"
    , "Spell attack increase by +2"
    , "Spell attack increase by +3"
    , "Spell casting ability increase by +1"
    , "Spell casting ability increase by +2"
    , "Spell casting ability increase by +3"
]
features= table
{
    tableLayout = layout
    {
        size = wide
        rowTitle = hidden
    }
    'Class features'=list
    {
        tableLayout = layout
        {
            size = wide
            rowTitle = hidden
        }
          source=(classFeatures (((Class.Main).Name), ((Class.Main).Levels)))
          singular = "Feature"
          editable = none 
    }
    'Race features'=list
    {
        tableLayout = layout
        {
            size = wide
            rowTitle = hidden
        }
          source=(raceFeatures ((Race.Main), (Race.Subrace)))
          singular = "Feature"
          editable = none 
    }
    'Other features'=list
    { 
        tableLayout = layout
        {
          size = wide
        }
        singular = "Feature"
        editable = character
        autocomplete = autoCompletes
        source=(secondary.'Other features')
    }

}