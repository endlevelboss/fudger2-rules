classFeatures(classname,level) = 
    (map 
        (
            ((feature)->(nameAndDescription((feature.Name),(feature.Description)))),
              (filter( ((f)->((f.Level)<(level+1))),
                ((first ((filter (((class)->((class.Name) == classname)), classInfo))))
                .Features)))
                )
        )

raceFeatures(main, subrace)=
   (if (subrace=="Standard") then
    ((getRace(main)).Features)
   else
    ((getSubrace(main,subrace)).Features))

jackBonus(char) = (bonusFrom (
                    [
                      (map ( ((x)->(x.Name)) ,(classFeatures ((((char.Class).Main).Name), (((char.Class).Main).Levels))))),
                      (map ( ((x)->(x.Name)) ,(raceFeatures (((char.Race).Main), ((char.Race).Subrace))))),
                      (map ( ((x)->(x.Name)) ,((char.'Features and Traits').'Other features')))
                    ],"Jack of All Trades", (((char.Basics).'Proficiency bonus') / 2)))
features= table
{
    tableLayout = layout
    {
        size = wide
        rowTitle = hidden
    }
    'Class features'=list
    {
        tableLayout = layout
        {
            size = wide
            rowTitle = hidden
        }
          source=(classFeatures (((Class.Main).Name), ((Class.Main).Levels)))
          singular = "Feature"
          editable = none 
    }
    'Race features'=list
    {
        tableLayout = layout
        {
            size = wide
            rowTitle = hidden
        }
          source=(raceFeatures ((Race.Main), (Race.Subrace)))
          singular = "Feature"
          editable = none 
    }
    'Other features'=list
    { 
        tableLayout = layout
        {
          size = wide
        }
        singular = "Feature"
        editable = character
        valueType = nameAndDescription
    }

}